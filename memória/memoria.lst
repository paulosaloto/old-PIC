CCS PCM C Compiler, Version 4.114, 93460303               18-jun-12 14:43

               Filename: C:\Users\Paulo\Documents\Programação\PIC\memória\memoria.lst

               ROM used: 473 words (6%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         15 (4%) worst case
               Stack:    2 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   19F
0003:  NOP
.................... // Este programa realiza a contagem de 0 a 255 nos leds do Kit SD-1700. 
....................  
.................... #include <16F877.h>             //Inclue a biblioteca 16F877a.h, disponível em 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
....................                                  // c:\Arquivos de programas\PICC\Devices 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,PUT    //Define para o compilador: a faixa de frequência do clock (pode ser LS, XT, HS), 
....................                                  //não uso do watchdog timer, 
.................... #define EEPROM_SDA  PIN_c4 
.................... #define EEPROM_SCL  PIN_c3                                 //não uso de proteção de código, 
....................                                 //uso do Power-up-timer, temporizador utilizado para inicialização do PIC. 
.................... #include <i2c.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Biblioteca para memória serial EEPROM 24LC256 serial EEPROM     //// 
.................... ////   e RTC PFC8583 para o PIC 16f877 com o kit.                      ////  
.................... ////   o RTC não precisa ser inicializado.                             //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);   Write the byte d to the address a     //// 
.................... ////   write_RTC(a, d);          Write the byte d to the address a     //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);   Read the byte d from the address a    //// 
.................... ////   d = read_RTC(a);          Read the byte d from the address a    //// 
.................... ////                                                                   ////  
.................... ////                                                                   //// 
.................... ////   The main program may define eeprom_sda                          //// 
.................... ////   and eeprom_scl to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
.................... #use i2c(master, slow, sda=EEPROM_SDA, scl=EEPROM_SCL) 
*
0011:  MOVLW  08
0012:  MOVWF  78
0013:  NOP
0014:  BCF    07.3
0015:  BCF    20.3
0016:  MOVF   20,W
0017:  BSF    03.5
0018:  MOVWF  07
0019:  NOP
001A:  BCF    03.5
001B:  RLF    29,F
001C:  BCF    07.4
001D:  BTFSS  03.0
001E:  GOTO   025
001F:  BSF    20.4
0020:  MOVF   20,W
0021:  BSF    03.5
0022:  MOVWF  07
0023:  GOTO   029
0024:  BCF    03.5
0025:  BCF    20.4
0026:  MOVF   20,W
0027:  BSF    03.5
0028:  MOVWF  07
0029:  NOP
002A:  BCF    03.5
002B:  BSF    20.3
002C:  MOVF   20,W
002D:  BSF    03.5
002E:  MOVWF  07
002F:  BCF    03.5
0030:  BTFSS  07.3
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   013
0034:  NOP
0035:  BCF    07.3
0036:  BCF    20.3
0037:  MOVF   20,W
0038:  BSF    03.5
0039:  MOVWF  07
003A:  NOP
003B:  BCF    03.5
003C:  BSF    20.4
003D:  MOVF   20,W
003E:  BSF    03.5
003F:  MOVWF  07
0040:  NOP
0041:  NOP
0042:  BCF    03.5
0043:  BSF    20.3
0044:  MOVF   20,W
0045:  BSF    03.5
0046:  MOVWF  07
0047:  BCF    03.5
0048:  BTFSS  07.3
0049:  GOTO   048
004A:  CLRF   78
004B:  NOP
004C:  BTFSC  07.4
004D:  BSF    78.0
004E:  BCF    07.3
004F:  BCF    20.3
0050:  MOVF   20,W
0051:  BSF    03.5
0052:  MOVWF  07
0053:  BCF    03.5
0054:  BCF    07.4
0055:  BCF    20.4
0056:  MOVF   20,W
0057:  BSF    03.5
0058:  MOVWF  07
0059:  BCF    03.5
005A:  RETURN
*
013E:  MOVLW  08
013F:  MOVWF  27
0140:  MOVF   77,W
0141:  MOVWF  28
0142:  BSF    20.4
0143:  MOVF   20,W
0144:  BSF    03.5
0145:  MOVWF  07
0146:  NOP
0147:  BCF    03.5
0148:  BSF    20.3
0149:  MOVF   20,W
014A:  BSF    03.5
014B:  MOVWF  07
014C:  BCF    03.5
014D:  BTFSS  07.3
014E:  GOTO   14D
014F:  BTFSC  07.4
0150:  BSF    03.0
0151:  BTFSS  07.4
0152:  BCF    03.0
0153:  RLF    78,F
0154:  NOP
0155:  BCF    20.3
0156:  MOVF   20,W
0157:  BSF    03.5
0158:  MOVWF  07
0159:  BCF    03.5
015A:  BCF    07.3
015B:  DECFSZ 27,F
015C:  GOTO   142
015D:  BSF    20.4
015E:  MOVF   20,W
015F:  BSF    03.5
0160:  MOVWF  07
0161:  NOP
0162:  BCF    03.5
0163:  BCF    07.4
0164:  MOVF   28,W
0165:  BTFSC  03.2
0166:  GOTO   16C
0167:  BCF    20.4
0168:  MOVF   20,W
0169:  BSF    03.5
016A:  MOVWF  07
016B:  BCF    03.5
016C:  NOP
016D:  BSF    20.3
016E:  MOVF   20,W
016F:  BSF    03.5
0170:  MOVWF  07
0171:  BCF    03.5
0172:  BTFSS  07.3
0173:  GOTO   172
0174:  NOP
0175:  BCF    07.3
0176:  BCF    20.3
0177:  MOVF   20,W
0178:  BSF    03.5
0179:  MOVWF  07
017A:  NOP
017B:  BCF    03.5
017C:  BCF    07.4
017D:  BCF    20.4
017E:  MOVF   20,W
017F:  BSF    03.5
0180:  MOVWF  07
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE   32768 
....................  
.................... void init_ext_eeprom() 
.................... { 
....................    output_float(EEPROM_SCL); 
*
0004:  BSF    20.3
0005:  MOVF   20,W
0006:  BSF    03.5
0007:  MOVWF  07
....................    output_float(EEPROM_SDA); 
0008:  BCF    03.5
0009:  BSF    20.4
000A:  MOVF   20,W
000B:  BSF    03.5
000C:  MOVWF  07
....................  
.................... } 
000D:  BCF    03.5
000E:  BCF    0A.3
000F:  BCF    0A.4
0010:  GOTO   1BD (RETURN)
....................  
....................  
.................... void write_ext_eeprom(long int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
*
005B:  BSF    20.4
005C:  MOVF   20,W
005D:  BSF    03.5
005E:  MOVWF  07
005F:  NOP
0060:  BCF    03.5
0061:  BSF    20.3
0062:  MOVF   20,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  NOP
0066:  BCF    03.5
0067:  BCF    07.4
0068:  BCF    20.4
0069:  MOVF   20,W
006A:  BSF    03.5
006B:  MOVWF  07
006C:  NOP
006D:  BCF    03.5
006E:  BCF    07.3
006F:  BCF    20.3
0070:  MOVF   20,W
0071:  BSF    03.5
0072:  MOVWF  07
....................    i2c_write(0xaE); 
0073:  MOVLW  AE
0074:  BCF    03.5
0075:  MOVWF  29
0076:  CALL   011
....................    i2c_write(address>>8); 
0077:  MOVF   24,W
0078:  MOVWF  27
0079:  CLRF   28
007A:  MOVF   24,W
007B:  MOVWF  29
007C:  CALL   011
....................    i2c_write(address); 
007D:  MOVF   23,W
007E:  MOVWF  29
007F:  CALL   011
....................    i2c_write(data); 
0080:  MOVF   25,W
0081:  MOVWF  29
0082:  CALL   011
....................    i2c_stop(); 
0083:  BCF    20.4
0084:  MOVF   20,W
0085:  BSF    03.5
0086:  MOVWF  07
0087:  NOP
0088:  BCF    03.5
0089:  BSF    20.3
008A:  MOVF   20,W
008B:  BSF    03.5
008C:  MOVWF  07
008D:  BCF    03.5
008E:  BTFSS  07.3
008F:  GOTO   08E
0090:  NOP
0091:  GOTO   092
0092:  NOP
0093:  BSF    20.4
0094:  MOVF   20,W
0095:  BSF    03.5
0096:  MOVWF  07
0097:  NOP
....................    i2c_start(); 
0098:  BCF    03.5
0099:  BSF    20.4
009A:  MOVF   20,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  NOP
009E:  BCF    03.5
009F:  BSF    20.3
00A0:  MOVF   20,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  NOP
00A4:  BCF    03.5
00A5:  BCF    07.4
00A6:  BCF    20.4
00A7:  MOVF   20,W
00A8:  BSF    03.5
00A9:  MOVWF  07
00AA:  NOP
00AB:  BCF    03.5
00AC:  BCF    07.3
00AD:  BCF    20.3
00AE:  MOVF   20,W
00AF:  BSF    03.5
00B0:  MOVWF  07
....................    status=i2c_write(0xaE); 
00B1:  MOVLW  AE
00B2:  BCF    03.5
00B3:  MOVWF  29
00B4:  CALL   011
00B5:  MOVF   78,W
00B6:  BCF    26.0
00B7:  BTFSC  78.0
00B8:  BSF    26.0
....................    while(status==1) 
....................    { 
00B9:  BTFSS  26.0
00BA:  GOTO   0DE
....................    i2c_start(); 
00BB:  BSF    20.4
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
00BF:  NOP
00C0:  BCF    03.5
00C1:  BSF    20.3
00C2:  MOVF   20,W
00C3:  BSF    03.5
00C4:  MOVWF  07
00C5:  NOP
00C6:  BCF    03.5
00C7:  BTFSS  07.3
00C8:  GOTO   0C7
00C9:  BCF    07.4
00CA:  BCF    20.4
00CB:  MOVF   20,W
00CC:  BSF    03.5
00CD:  MOVWF  07
00CE:  NOP
00CF:  BCF    03.5
00D0:  BCF    07.3
00D1:  BCF    20.3
00D2:  MOVF   20,W
00D3:  BSF    03.5
00D4:  MOVWF  07
....................    status=i2c_write(0xaE); 
00D5:  MOVLW  AE
00D6:  BCF    03.5
00D7:  MOVWF  29
00D8:  CALL   011
00D9:  MOVF   78,W
00DA:  BCF    26.0
00DB:  BTFSC  78.0
00DC:  BSF    26.0
....................    } 
00DD:  GOTO   0B9
.................... } 
00DE:  BCF    0A.3
00DF:  BCF    0A.4
00E0:  GOTO   1C6 (RETURN)
....................  
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................    i2c_start(); 
*
00F8:  BSF    20.4
00F9:  MOVF   20,W
00FA:  BSF    03.5
00FB:  MOVWF  07
00FC:  NOP
00FD:  BCF    03.5
00FE:  BSF    20.3
00FF:  MOVF   20,W
0100:  BSF    03.5
0101:  MOVWF  07
0102:  NOP
0103:  BCF    03.5
0104:  BTFSS  07.3
0105:  GOTO   104
0106:  BCF    07.4
0107:  BCF    20.4
0108:  MOVF   20,W
0109:  BSF    03.5
010A:  MOVWF  07
010B:  NOP
010C:  BCF    03.5
010D:  BCF    07.3
010E:  BCF    20.3
010F:  MOVF   20,W
0110:  BSF    03.5
0111:  MOVWF  07
....................    i2c_write(0xaE); 
0112:  MOVLW  AE
0113:  BCF    03.5
0114:  MOVWF  29
0115:  CALL   011
....................    i2c_write(address>>8); 
0116:  MOVF   24,W
0117:  MOVWF  26
0118:  CLRF   27
0119:  MOVF   24,W
011A:  MOVWF  29
011B:  CALL   011
....................    i2c_write(address); 
011C:  MOVF   23,W
011D:  MOVWF  29
011E:  CALL   011
....................    i2c_start(); 
011F:  BSF    20.4
0120:  MOVF   20,W
0121:  BSF    03.5
0122:  MOVWF  07
0123:  NOP
0124:  BCF    03.5
0125:  BSF    20.3
0126:  MOVF   20,W
0127:  BSF    03.5
0128:  MOVWF  07
0129:  NOP
012A:  BCF    03.5
012B:  BTFSS  07.3
012C:  GOTO   12B
012D:  BCF    07.4
012E:  BCF    20.4
012F:  MOVF   20,W
0130:  BSF    03.5
0131:  MOVWF  07
0132:  NOP
0133:  BCF    03.5
0134:  BCF    07.3
0135:  BCF    20.3
0136:  MOVF   20,W
0137:  BSF    03.5
0138:  MOVWF  07
....................    i2c_write(0xaF); 
0139:  MOVLW  AF
013A:  BCF    03.5
013B:  MOVWF  29
013C:  CALL   011
....................    data=i2c_read(0); 
013D:  CLRF   77
*
0181:  MOVF   78,W
0182:  BCF    03.5
0183:  MOVWF  25
....................    i2c_stop(); 
0184:  BCF    20.4
0185:  MOVF   20,W
0186:  BSF    03.5
0187:  MOVWF  07
0188:  NOP
0189:  BCF    03.5
018A:  BSF    20.3
018B:  MOVF   20,W
018C:  BSF    03.5
018D:  MOVWF  07
018E:  BCF    03.5
018F:  BTFSS  07.3
0190:  GOTO   18F
0191:  NOP
0192:  GOTO   193
0193:  NOP
0194:  BSF    20.4
0195:  MOVF   20,W
0196:  BSF    03.5
0197:  MOVWF  07
0198:  NOP
....................    return(data); 
0199:  BCF    03.5
019A:  MOVF   25,W
019B:  MOVWF  78
.................... } 
019C:  BCF    0A.3
019D:  BCF    0A.4
019E:  GOTO   1D1 (RETURN)
....................  
....................  
.................... void write_RTC(int address, BYTE data) 
.................... { 
....................    short int status; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    while(status==1) 
....................    { 
....................    i2c_start(); 
....................    status=i2c_write(0xa0); 
....................    } 
.................... } 
....................  
.................... BYTE read_RTC(int address) { 
....................    BYTE data; 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
....................  
.................... #use delay(clock=4000000)        //Define a frequência de clock. 
*
00E1:  MOVLW  24
00E2:  MOVWF  04
00E3:  BCF    03.7
00E4:  MOVF   00,W
00E5:  BTFSC  03.2
00E6:  GOTO   0F5
00E7:  MOVLW  01
00E8:  MOVWF  78
00E9:  CLRF   77
00EA:  DECFSZ 77,F
00EB:  GOTO   0EA
00EC:  DECFSZ 78,F
00ED:  GOTO   0E9
00EE:  MOVLW  4A
00EF:  MOVWF  77
00F0:  DECFSZ 77,F
00F1:  GOTO   0F0
00F2:  GOTO   0F3
00F3:  DECFSZ 00,F
00F4:  GOTO   0E7
00F5:  BCF    0A.3
00F6:  BCF    0A.4
00F7:  GOTO   1CB (RETURN)
....................  
.................... #use I2C(slow) 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
....................  
.................... #byte SSPSTAT = 0x94 
.................... #byte porta = 5 
.................... #byte portb = 6 
.................... #byte portc = 7 
.................... #byte portd = 8 
.................... #byte porte = 9 
....................  
....................  
....................  
.................... void main() 
.................... { 
*
019F:  CLRF   04
01A0:  BCF    03.7
01A1:  MOVLW  1F
01A2:  ANDWF  03,F
01A3:  MOVLW  FF
01A4:  MOVWF  20
01A5:  BSF    03.5
01A6:  BSF    1F.0
01A7:  BSF    1F.1
01A8:  BSF    1F.2
01A9:  BCF    1F.3
....................  
....................    // Configuração de vias das portas do PIC como saída ou como entrada. 
....................    // Se o bit 0 do registrador especial TRISA é 0, a via 0 da portA do PIC é saída, caso contrário é entrada. 
....................    // Assim são configuradas todas as vias das portas do PIC, de qualquer porta. 
....................    // Exemplo: TRISA = | 0 | 1 | 0 | 1 | 0 | 1 | -> PORTA = | S | E | S | E | S | E | , no 16F877A a portA tem 6 vias. 
....................    bit_clear(SSPSTAT,6); 
01AA:  BCF    14.6
....................    set_tris_a(0x00); // Define que todas as vias da portA do PIC serão saídas. 
01AB:  MOVLW  00
01AC:  MOVWF  05
....................    set_tris_d(0x00); // Define que todas as vias da portD do PIC serão saídas. 
01AD:  MOVWF  08
....................    set_tris_b(0xF0); 
01AE:  MOVLW  F0
01AF:  MOVWF  06
....................    portb=0xff; 
01B0:  MOVLW  FF
01B1:  BCF    03.5
01B2:  MOVWF  06
....................    set_tris_c(0xff); 
01B3:  BSF    03.5
01B4:  MOVWF  07
....................    bit_set(porta,4); // Ativa os leds, saturando o transistor chave no catodo comum dos leds. Vide página 13 do manual. 
01B5:  BCF    03.5
01B6:  BSF    05.4
....................    port_b_pullups(TRUE); 
01B7:  BSF    03.5
01B8:  BCF    01.7
....................    portd = 0xc2; 
01B9:  MOVLW  C2
01BA:  BCF    03.5
01BB:  MOVWF  08
....................    //portc = 0x0F;// Define todos os leds acesos inicialmente, valor inicial da contagem FF (zero). 
....................    init_ext_eeprom(); 
01BC:  GOTO   004
....................    int data1=0, data2=0x36; 
01BD:  CLRF   21
01BE:  MOVLW  36
01BF:  MOVWF  22
....................    while (1){ 
....................     
....................    write_ext_eeprom(15, data2); 
01C0:  CLRF   24
01C1:  MOVLW  0F
01C2:  MOVWF  23
01C3:  MOVF   22,W
01C4:  MOVWF  25
01C5:  GOTO   05B
....................    delay_ms(300); 
01C6:  MOVLW  02
01C7:  MOVWF  23
01C8:  MOVLW  96
01C9:  MOVWF  24
01CA:  GOTO   0E1
01CB:  DECFSZ 23,F
01CC:  GOTO   1C8
....................    data1 = read_ext_eeprom(15); 
01CD:  CLRF   24
01CE:  MOVLW  0F
01CF:  MOVWF  23
01D0:  GOTO   0F8
01D1:  MOVF   78,W
01D2:  MOVWF  21
....................    portd=data1; 
01D3:  MOVF   21,W
01D4:  MOVWF  08
....................    data2=data2+1; 
01D5:  MOVLW  01
01D6:  ADDWF  22,F
....................    } 
01D7:  GOTO   1C0
.................... } 
....................  
....................  
01D8:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD WRT NODEBUG NOPROTECT
